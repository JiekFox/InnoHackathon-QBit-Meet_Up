from fastapi import FastAPI, Request
from telegram import Bot, Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv
import os
import logging
import requests
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot
BOT_TOKEN = os.getenv("BOT_TOKEN")
BACKEND_URL = os.getenv("BACKEND_URL")
AUTH_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzMyNzk2ODYzLCJpYXQiOjE3MzI3MTA0NjMsImp0aSI6IjYwYTFlMTU5Y2UxNTRhNzhhZDk5ZTdiNjE3YjE4MDZlIiwidXNlcl9pZCI6MSwidXNlcm5hbWUiOiJhZG1pbjEifQ.dhqSgFh8SZMERHzVuwjbgoqlshr8XsKzFEAjMjqI9DE"

if not BOT_TOKEN:
    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not BACKEND_URL:
    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω BACKEND_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
bot = Bot(token=BOT_TOKEN)

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
HEADERS = {"Authorization": f"Bearer {AUTH_TOKEN}"}


@app.post(f"/webhook/{BOT_TOKEN}")
async def webhook(request: Request):
    try:
        data = await request.json()
        update = Update.de_json(data, bot)
        logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update}")

        if update.message:
            text = update.message.text
            user_id = update.message.from_user.id
            username = update.message.from_user.username or "Unknown"

            # –ö–æ–º–∞–Ω–¥–∞ "–í—Å–µ –º–∏—Ç–∞–ø—ã"
            if text == "–í—Å–µ –º–∏—Ç–∞–ø—ã" or text == "/meetups":
                try:
                    response = requests.get(f"{BACKEND_URL}/meetings/", headers=HEADERS)
                    response.raise_for_status()
                    meetings = response.json()
                    message = "*–°–ø–∏—Å–æ–∫ –º–∏—Ç–∞–ø–æ–≤:*\n" + "\n".join(
                        [
                            f'‚Ä¢ ({meeting["id"]}) *{meeting["title"]}* '
                            f'(–î–∞—Ç–∞: {datetime.fromisoformat(meeting["datetime_beg"]).strftime("%d.%m.%Y %H:%M")})'
                            for meeting in meetings[:5]
                        ]
                    )
                    keyboard = InlineKeyboardMarkup(
                        [
                            [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å", callback_data="choose_meetup")]
                        ]
                    )
                    await bot.send_message(chat_id=update.message.chat.id, text=message, parse_mode="Markdown", reply_markup=keyboard)
                except Exception as e:
                    await bot.send_message(chat_id=update.message.chat.id, text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∏—Ç–∞–ø–æ–≤: {e}")

            # –ö–æ–º–∞–Ω–¥–∞ "–ú–æ–∏ –º–∏—Ç–∞–ø—ã (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ)"
            elif text == "–ú–æ–∏ –º–∏—Ç–∞–ø—ã (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ)" or text == "/my_meetups_owner":
                try:
                    response = requests.get(f"{BACKEND_URL}/my_meetups_owner/tg/{user_id}", headers=HEADERS)
                    response.raise_for_status()
                    meetups = response.json()
                    if not meetups:
                        await bot.send_message(chat_id=update.message.chat.id, text="üéØ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–∏—Ç–∞–ø–æ–≤.")
                    else:
                        message = "*–í–∞—à–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –º–∏—Ç–∞–ø—ã:*\n" + "\n".join(
                            [
                                f'‚Ä¢ ({meetup["id"]}) *{meetup["title"]}* '
                                f'(–î–∞—Ç–∞: {datetime.fromisoformat(meetup["datetime_beg"]).strftime("%d.%m.%Y %H:%M")})'
                                for meetup in meetups
                            ]
                        )
                        await bot.send_message(chat_id=update.message.chat.id, text=message, parse_mode="Markdown")
                except Exception as e:
                    await bot.send_message(chat_id=update.message.chat.id, text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∏—Ç–∞–ø–æ–≤: {e}")

            # –ö–æ–º–∞–Ω–¥–∞ "–ú–æ–∏ –º–∏—Ç–∞–ø—ã (–ø–æ–¥–ø–∏—Å–∫–∏)"
            elif text == "–ú–æ–∏ –º–∏—Ç–∞–ø—ã (–ø–æ–¥–ø–∏—Å–∫–∏)" or text == "/my_meetups_subscriber":
                try:
                    response = requests.get(f"{BACKEND_URL}/my_meetups_subscriber/tg/{user_id}", headers=HEADERS)
                    response.raise_for_status()
                    meetups = response.json()
                    if not meetups:
                        await bot.send_message(chat_id=update.message.chat.id, text="üìå –í—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–∏—Ç–∞–ø—ã.")
                    else:
                        message = "*–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –º–∏—Ç–∞–ø—ã:*\n" + "\n".join(
                            [
                                f'‚Ä¢ ({meetup["id"]}) *{meetup["title"]}* '
                                f'(–î–∞—Ç–∞: {datetime.fromisoformat(meetup["datetime_beg"]).strftime("%d.%m.%Y %H:%M")})'
                                for meetup in meetups
                            ]
                        )
                        await bot.send_message(chat_id=update.message.chat.id, text=message, parse_mode="Markdown")
                except Exception as e:
                    await bot.send_message(chat_id=update.message.chat.id, text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∏—Ç–∞–ø–æ–≤: {e}")

            # –ö–æ–º–∞–Ω–¥–∞ "–ü–æ–∏—Å–∫"
            elif text.startswith("/search "):
                query = text.split(" ", 1)[1].strip()
                try:
                    response = requests.get(f"{BACKEND_URL}/meetings/", headers=HEADERS)
                    response.raise_for_status()
                    meetings = response.json()
                    meeting = next(
                        (m for m in meetings if str(m["id"]) == query or m["title"].lower() == query.lower()),
                        None
                    )
                    if not meeting:
                        await bot.send_message(chat_id=update.message.chat.id, text="‚ùå –ú–∏—Ç–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                        return

                    formatted_date = datetime.fromisoformat(meeting["datetime_beg"]).strftime("%d.%m.%Y %H:%M")
                    caption = (
                        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏—Ç–∞–ø–µ:\n"
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: *{meeting['title']}*\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: _{meeting['description']}_\n"
                        f"–î–∞—Ç–∞: {formatted_date}"
                    )
                    website_link = f"https://qbit-meetup.web.app/meetup-details/{meeting['id']}"
                    keyboard = InlineKeyboardMarkup(
                        [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=website_link)]]
                    )

                    if "image" in meeting and meeting["image"]:
                        await bot.send_photo(
                            chat_id=update.message.chat.id,
                            photo=meeting["image"],
                            caption=caption,
                            reply_markup=keyboard,
                            parse_mode="Markdown"
                        )
                    else:
                        await bot.send_message(
                            chat_id=update.message.chat.id,
                            text=caption,
                            reply_markup=keyboard,
                            parse_mode="Markdown"
                        )
                except Exception as e:
                    await bot.send_message(chat_id=update.message.chat.id, text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∏—Ç–∞–ø–∞: {e}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ CallbackQuery
        elif update.callback_query:
            callback_data = update.callback_query.data
            if callback_data == "choose_meetup":
                await bot.send_message(
                    chat_id=update.callback_query.message.chat.id,
                    text="–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∏—Ç–∞–ø–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å."
                )

        return {"ok": True}
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return {"ok": False, "error": str(e)}
