from fastapi import FastAPI, Request
from telegram import Bot, Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv
import os
import logging
import requests
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot
BOT_TOKEN = os.getenv("BOT_TOKEN")
BACKEND_URL = os.getenv("BACKEND_URL")
if not BOT_TOKEN:
    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not BACKEND_URL:
    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω BACKEND_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
bot = Bot(token=BOT_TOKEN)


@app.post(f"/webhook/{BOT_TOKEN}")
async def webhook(request: Request):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        data = await request.json()
        update = Update.de_json(data, bot)
        logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update}")

        if update.message:
            text = update.message.text
            user_id = update.message.from_user.id
            username = update.message.from_user.username or "Unknown"

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
            if text == "/start":
                keyboard = ReplyKeyboardMarkup(
                    [["üîç –ü–æ–∏—Å–∫", "–í—Å–µ –º–∏—Ç–∞–ø—ã"], ["–ú–æ–∏ –º–∏—Ç–∞–ø—ã (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ)", "–ú–æ–∏ –º–∏—Ç–∞–ø—ã (–ø–æ–¥–ø–∏—Å–∫–∏)"]],
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
                await bot.send_message(
                    chat_id=update.message.chat.id,
                    text=(
                        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –º–æ–∂–µ—Ç–µ:\n"
                        "- üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –º–∏—Ç–∞–ø–æ–≤.\n"
                        "- üéØ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –º–∏—Ç–∞–ø–∞–º–∏ (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ/–ø–æ–¥–ø–∏—Å–∫–∏).\n"
                        "- üîç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –º–∏—Ç–∞–ø–æ–≤ –ø–æ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é."
                    ),
                    reply_markup=keyboard
                )

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–í—Å–µ –º–∏—Ç–∞–ø—ã" –∏–ª–∏ /meetups
            elif text == "–í—Å–µ –º–∏—Ç–∞–ø—ã" or text == "/meetups":
                try:
                    response = requests.get(f"{BACKEND_URL}/meetings/")
                    response.raise_for_status()
                    meetings = response.json()
                    message = "*–°–ø–∏—Å–æ–∫ –º–∏—Ç–∞–ø–æ–≤:*\n" + "\n".join(
                        [
                            f'‚Ä¢ ({meeting["id"]}) *{meeting["title"]}* '
                            f'(–î–∞—Ç–∞: {datetime.fromisoformat(meeting["datetime_beg"]).strftime("%d.%m.%Y %H:%M")})'
                            for meeting in meetings[:5]
                        ]
                    )
                    await bot.send_message(chat_id=update.message.chat.id, text=message, parse_mode="Markdown")
                except Exception as e:
                    message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∏—Ç–∞–ø–æ–≤: {e}"
                    await bot.send_message(chat_id=update.message.chat.id, text=message)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ú–æ–∏ –º–∏—Ç–∞–ø—ã (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ)" –∏–ª–∏ /my_meetups_owner
            elif text == "–ú–æ–∏ –º–∏—Ç–∞–ø—ã (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ)" or text == "/my_meetups_owner":
                request_url = f"{BACKEND_URL}/my_meetups_owner/tg/{user_id}"
                logging.info(f"–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å: {request_url} —Å tgUserId={username}")
                try:
                    response = requests.get(request_url)
                    response.raise_for_status()
                    meetups = response.json()
                    if not meetups:
                        await bot.send_message(chat_id=update.message.chat.id, text="üéØ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–∏—Ç–∞–ø–æ–≤.")
                    else:
                        message = "*–í–∞—à–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –º–∏—Ç–∞–ø—ã:*\n" + "\n".join(
                            [
                                f'‚Ä¢ ({meetup["id"]}) *{meetup["title"]}* '
                                f'(–î–∞—Ç–∞: {datetime.fromisoformat(meetup["datetime_beg"]).strftime("%d.%m.%Y %H:%M")})'
                                for meetup in meetups
                            ]
                        )
                        await bot.send_message(chat_id=update.message.chat.id, text=message, parse_mode="Markdown")
                except Exception as e:
                    await bot.send_message(
                        chat_id=update.message.chat.id,
                        text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–∏—Ç–∞–ø–æ–≤: {e}"
                    )

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ú–æ–∏ –º–∏—Ç–∞–ø—ã (–ø–æ–¥–ø–∏—Å–∫–∏)" –∏–ª–∏ /my_meetups_subscriber
            elif text == "–ú–æ–∏ –º–∏—Ç–∞–ø—ã (–ø–æ–¥–ø–∏—Å–∫–∏)" or text == "/my_meetups_subscriber":
                request_url = f"{BACKEND_URL}/my_meetups_subscriber/tg/{user_id}"
                logging.info(f"–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å: {request_url} —Å tgUserId={username}")
                try:
                    response = requests.get(request_url)
                    response.raise_for_status()
                    meetups = response.json()
                    if not meetups:
                        await bot.send_message(chat_id=update.message.chat.id, text="üìå –í—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–∏—Ç–∞–ø—ã.")
                    else:
                        message = "*–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –º–∏—Ç–∞–ø—ã:*\n" + "\n".join(
                            [
                                f'‚Ä¢ ({meetup["id"]}) *{meetup["title"]}* '
                                f'(–î–∞—Ç–∞: {datetime.fromisoformat(meetup["datetime_beg"]).strftime("%d.%m.%Y %H:%M")})'
                                for meetup in meetups
                            ]
                        )
                        await bot.send_message(chat_id=update.message.chat.id, text=message, parse_mode="Markdown")
                except Exception as e:
                    await bot.send_message(
                        chat_id=update.message.chat.id,
                        text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –º–∏—Ç–∞–ø—ã: {e}"
                    )

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞
            elif text == "üîç –ü–æ–∏—Å–∫" or text.startswith("/search "):
                query = text.split(" ", 1)[1] if text.startswith("/search ") else None
                await bot.send_message(
                    chat_id=update.message.chat.id,
                    text=f"–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∏—Ç–∞–ø–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞."
                )

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID/–Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
            elif text.isdigit() or text.isalnum():
                query = text
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç –º–∏—Ç–∞–ø: {query} (tgUserId={username})")
                try:
                    response = requests.get(f"{BACKEND_URL}/meetings/")
                    response.raise_for_status()
                    meetings = response.json()

                    # –ü–æ–∏—Å–∫ –º–∏—Ç–∞–ø–∞ –ø–æ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é
                    meeting = next(
                        (m for m in meetings if str(m["id"]) == query or m["title"].lower() == query.lower()),
                        None
                    )
                    if not meeting:
                        await bot.send_message(chat_id=update.message.chat.id, text="‚ùå –ú–∏—Ç–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                        return

                    formatted_date = datetime.fromisoformat(meeting["datetime_beg"]).strftime("%d.%m.%Y %H:%M")
                    caption = (
                        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏—Ç–∞–ø–µ:\n"
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: *{meeting['title']}*\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: _{meeting['description']}_\n"
                        f"–î–∞—Ç–∞: {formatted_date}\n"
                        f"–°—Å—ã–ª–∫–∞: {meeting['link']}"
                    )
                    await bot.send_message(chat_id=update.message.chat.id, text=caption, parse_mode="Markdown")
                except Exception as e:
                    await bot.send_message(chat_id=update.message.chat.id, text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∏—Ç–∞–ø–∞: {e}")

        return {"ok": True}
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return {"ok": False, "error": str(e)}
