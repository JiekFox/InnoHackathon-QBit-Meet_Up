from fastapi import FastAPI, Request
from telegram import Bot, Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv
import os
import logging
import requests
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot
BOT_TOKEN = os.getenv("BOT_TOKEN")
BACKEND_URL = os.getenv("BACKEND_URL")
if not BOT_TOKEN:
    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not BACKEND_URL:
    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω BACKEND_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
bot = Bot(token=BOT_TOKEN)


@app.post(f"/webhook/{BOT_TOKEN}")
async def webhook(request: Request):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        data = await request.json()
        update = Update.de_json(data, bot)
        logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update}")

        if update.message:
            text = update.message.text

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
            if text == "/start":
                keyboard = ReplyKeyboardMarkup(
                    [["–í—Å–µ –º–∏—Ç–∞–ø—ã", "–ú–æ–∏ –º–∏—Ç–∞–ø—ã (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ)", "–ú–æ–∏ –º–∏—Ç–∞–ø—ã (–ø–æ–¥–ø–∏—Å–∫–∏)"]],
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
                await bot.send_message(
                    chat_id=update.message.chat.id,
                    text=(
                        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –º–æ–∂–µ—Ç–µ:\n"
                        "- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –º–∏—Ç–∞–ø–æ–≤.\n"
                        "- –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –º–∏—Ç–∞–ø–∞–º–∏ (—Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º–∏).\n"
                        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help."
                    ),
                    reply_markup=keyboard
                )

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
            elif text == "/help":
                await bot.send_message(
                    chat_id=update.message.chat.id,
                    text=(
                        "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å:\n"
                        "- –ö–æ–º–∞–Ω–¥–∞ '–í—Å–µ –º–∏—Ç–∞–ø—ã': –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏—Ç–∞–ø–æ–≤.\n"
                        "- –ö–æ–º–∞–Ω–¥–∞ '–ú–æ–∏ –º–∏—Ç–∞–ø—ã (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ)': –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∏—Ç–∞–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–æ–∑–¥–∞–ª–∏.\n"
                        "- –ö–æ–º–∞–Ω–¥–∞ '–ú–æ–∏ –º–∏—Ç–∞–ø—ã (–ø–æ–¥–ø–∏—Å–∫–∏)': –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∏—Ç–∞–ø—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã.\n"
                        "- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø–∏—Å–∏/–æ—Ç–ø–∏—Å–∫–∏: /subscribe [ID] –∏ /unsubscribe [ID].\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤—Ä—É—á–Ω—É—é."
                    )
                )

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–í—Å–µ –º–∏—Ç–∞–ø—ã"
            elif text == "–í—Å–µ –º–∏—Ç–∞–ø—ã":
                try:
                    response = requests.get(f"{BACKEND_URL}/meetings/")
                    response.raise_for_status()
                    meetings = response.json()
                    message = "–°–ø–∏—Å–æ–∫ –º–∏—Ç–∞–ø–æ–≤:\n" + "\n".join(
                        [
                            f'‚Ä¢ ({meeting["id"]}) *{meeting["title"]}* '
                            f'(–î–∞—Ç–∞: {datetime.fromisoformat(meeting["datetime_beg"]).strftime("%d.%m.%Y %H:%M")}) '
                            f'[üõà](tg://msg?text=/search+{meeting["id"]})'
                            for meeting in meetings[:5]
                        ]
                    )
                except Exception as e:
                    message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∏—Ç–∞–ø–æ–≤: {e}"
                await bot.send_message(chat_id=update.message.chat.id, text=message, parse_mode="Markdown")

            # –ó–∞–≥–æ—Ç–æ–≤–∫–∞: "–ú–æ–∏ –º–∏—Ç–∞–ø—ã (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ)"
            elif text == "–ú–æ–∏ –º–∏—Ç–∞–ø—ã (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ)":
                await bot.send_message(
                    chat_id=update.message.chat.id,
                    text="–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –º–∏—Ç–∞–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–æ–∑–¥–∞–ª–∏."
                )

            # –ó–∞–≥–æ—Ç–æ–≤–∫–∞: "–ú–æ–∏ –º–∏—Ç–∞–ø—ã (–ø–æ–¥–ø–∏—Å–∫–∏)"
            elif text == "–ú–æ–∏ –º–∏—Ç–∞–ø—ã (–ø–æ–¥–ø–∏—Å–∫–∏)":
                await bot.send_message(
                    chat_id=update.message.chat.id,
                    text="–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –º–∏—Ç–∞–ø—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã."
                )

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /search [id]
            elif text.startswith("/search "):
                query = text.split(" ", 1)[1]
                try:
                    response = requests.get(f"{BACKEND_URL}/meetings/")
                    response.raise_for_status()
                    meetings = response.json()

                    # –ü–æ–∏—Å–∫ –º–∏—Ç–∞–ø–∞ –ø–æ ID
                    meeting = next((m for m in meetings if str(m["id"]) == query), None)
                    if not meeting:
                        raise ValueError("–ú–∏—Ç–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω.")

                    formatted_date = datetime.fromisoformat(meeting["datetime_beg"]).strftime("%d.%m.%Y %H:%M")
                    caption = (
                        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏—Ç–∞–ø–µ:\n"
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: *{meeting['title']}*\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: _{meeting['description']}_\n"
                        f"–î–∞—Ç–∞: {formatted_date}\n"
                        f"–°—Å—ã–ª–∫–∞: {meeting['link']}"
                    )
                    buttons = InlineKeyboardMarkup([
                        [
                            InlineKeyboardButton(
                                "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
                                callback_data=f"subscribe {meeting['id']}"
                            ),
                            InlineKeyboardButton(
                                "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è",
                                callback_data=f"unsubscribe {meeting['id']}"
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                "–ü–µ—Ä–µ–π—Ç–∏ –∫ –º–∏—Ç–∞–ø—É",
                                url=f"https://qbit-meetup.web.app/meetup-details/{meeting['id']}"
                            )
                        ]
                    ])
                    if meeting.get("image"):
                        await bot.send_photo(
                            chat_id=update.message.chat.id,
                            photo=meeting["image"],
                            caption=caption,
                            parse_mode="Markdown",
                            reply_markup=buttons
                        )
                    else:
                        await bot.send_message(
                            chat_id=update.message.chat.id,
                            text=caption,
                            parse_mode="Markdown",
                            reply_markup=buttons
                        )
                except Exception as e:
                    message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∏—Ç–∞–ø–∞: {e}"
                    await bot.send_message(chat_id=update.message.chat.id, text=message)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_data –¥–ª—è –∑–∞–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏
            elif update.callback_query:
                callback_data = update.callback_query.data
                if callback_data.startswith("subscribe "):
                    meetup_id = callback_data.split(" ")[1]
                    await bot.send_message(
                        chat_id=update.callback_query.message.chat.id,
                        text=f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–∏—Ç–∞–ø {meetup_id}."
                    )
                elif callback_data.startswith("unsubscribe "):
                    meetup_id = callback_data.split(" ")[1]
                    await bot.send_message(
                        chat_id=update.callback_query.message.chat.id,
                        text=f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –º–∏—Ç–∞–ø–∞ {meetup_id}."

                    )

        return {"ok": True}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return {"ok": False, "error": str(e)}
