from fastapi import FastAPI, Request
from telegram import Bot, Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv
import os
import logging
import requests
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot
BOT_TOKEN = os.getenv("BOT_TOKEN")
BACKEND_URL = os.getenv("BACKEND_URL")
ACCESS_TOKEN = os.getenv("ACCESS_TOKEN")
headers = {'Authorization': f'Bearer {ACCESS_TOKEN}'}

if not BOT_TOKEN:
    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not BACKEND_URL:
    raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω BACKEND_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
bot = Bot(token=BOT_TOKEN)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}


@app.post(f"/webhook/{BOT_TOKEN}")
async def webhook(request: Request):
    try:
        data = await request.json()
        update = Update.de_json(data, bot)
        logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update}")

        if update.message:
            text = update.message.text
            user_id = update.message.from_user.id

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            if user_id in user_states and user_states[user_id] == "waiting_for_search":
                query = text.strip()
                try:
                    page = 1
                    page_size = 50
                    found = False
                    while not found:
                        response = requests.get(f"{BACKEND_URL}/meetings/?page={page}&page_size={page_size}")
                        response.raise_for_status()
                        data = response.json()
                        meetings = data.get("results", [])

                        meeting = next(
                            (m for m in meetings if
                             str(m.get("id")) == query or m.get("title", "").lower() == query.lower()),
                            None
                        )

                        if 'meeting' in locals() and meeting:
                            found = True
                            formatted_date = datetime.fromisoformat(meeting["datetime_beg"]).strftime("%d.%m.%Y")
                            formatted_time = datetime.fromisoformat(meeting["datetime_beg"]).strftime("%H:%M")
                            caption = (
                                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏—Ç–∞–ø–µ:\n"
                                f"–ù–∞–∑–≤–∞–Ω–∏–µ: *{meeting['title']}*\n"
                                f"–û–ø–∏—Å–∞–Ω–∏–µ: _{meeting['description']}_\n"
                                f"–î–∞—Ç–∞: {formatted_date}, –≤—Ä–µ–º—è: {formatted_time}\n"
                                f"ID: {meeting['id']}"
                            )
                            website_link = f"https://qbit-meetup.web.app/meetup-details/{meeting['id']}"
                            keyboard_buttons = [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=website_link)]]
                            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏
                            try:
                                response = requests.get(f"{BACKEND_URL}/users/meetings_signed_active/?tg_id={user_id}",
                                                        headers=headers)
                                response.raise_for_status()
                                signed_meetings = response.json()
                                is_signed = any(m["id"] == meeting["id"] for m in signed_meetings)
                                if is_signed:
                                    keyboard_buttons[0].append(InlineKeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è ‚ùå",
                                                                                    callback_data=f"unsubscribe:{meeting['id']}"))
                                else:
                                    keyboard_buttons[0].append(InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è ‚úÖ",
                                                                                    callback_data=f"subscribe:{meeting['id']}"))
                            except Exception as e:
                                await bot.send_message(chat_id=update.message.chat.id,
                                                       text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

                            keyboard = InlineKeyboardMarkup(keyboard_buttons)

                            if "image" in meeting and meeting["image"]:
                                await bot.send_photo(
                                    chat_id=update.message.chat.id,
                                    photo=meeting["image"],
                                    caption=caption,
                                    reply_markup=keyboard,
                                    parse_mode="Markdown"
                                )
                            else:
                                await bot.send_message(
                                    chat_id=update.message.chat.id,
                                    text=caption,
                                    reply_markup=keyboard,
                                    parse_mode="Markdown"
                                )
                            break

                        if not data.get("next"):
                            break
                        page += 1

                    if not found:
                        await bot.send_message(chat_id=update.message.chat.id, text="‚ùå –ú–∏—Ç–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                except Exception as e:
                    await bot.send_message(chat_id=update.message.chat.id, text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∏—Ç–∞–ø–∞: {e}")

                # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
                user_states.pop(user_id, None)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
            if text == "/start":
                keyboard = ReplyKeyboardMarkup(
                    [["üîç –ü–æ–∏—Å–∫", "üìú –í—Å–µ –º–∏—Ç–∞–ø—ã"], ["üéØ –ú–æ–∏ –º–∏—Ç–∞–ø—ã (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ)", "üìå –ú–æ–∏ –º–∏—Ç–∞–ø—ã (–ø–æ–¥–ø–∏—Å–∫–∏)"]],
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
                await bot.send_message(
                    chat_id=update.message.chat.id,
                    text=(
                        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –º–æ–∂–µ—Ç–µ:\n"
                        "- üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –º–∏—Ç–∞–ø–æ–≤.\n"
                        "- üéØ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –º–∏—Ç–∞–ø–∞–º–∏ (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ/–ø–æ–¥–ø–∏—Å–∫–∏).\n"
                        "- üîç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –º–∏—Ç–∞–ø–æ–≤ –ø–æ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é.\n\n"
                        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help."
                    ),
                    reply_markup=keyboard
                )
                await bot.send_message(
                    chat_id=update.message.chat.id,
                    text=(
                        "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å:\n"
                        "- üìú –ö–æ–º–∞–Ω–¥–∞ '–í—Å–µ –º–∏—Ç–∞–ø—ã': –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏—Ç–∞–ø–æ–≤.\n"
                        "- üîç –ö–æ–º–∞–Ω–¥–∞ '–ü–æ–∏—Å–∫': –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–π—Ç–∏ –º–∏—Ç–∞–ø –ø–æ –µ–≥–æ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é.\n"
                        "- üéØ –ö–æ–º–∞–Ω–¥–∞ '–ú–æ–∏ –º–∏—Ç–∞–ø—ã (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ)': –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∏—Ç–∞–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–æ–∑–¥–∞–ª–∏.\n"
                        "- üìå –ö–æ–º–∞–Ω–¥–∞ '–ú–æ–∏ –º–∏—Ç–∞–ø—ã (–ø–æ–¥–ø–∏—Å–∫–∏)': –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∏—Ç–∞–ø—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã.\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤—Ä—É—á–Ω—É—é."
                    )
                )

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
            elif text == "/help":
                keyboard = ReplyKeyboardMarkup(
                    [["üîç –ü–æ–∏—Å–∫", "üìú –í—Å–µ –º–∏—Ç–∞–ø—ã"], ["üéØ –ú–æ–∏ –º–∏—Ç–∞–ø—ã (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ)", "üìå –ú–æ–∏ –º–∏—Ç–∞–ø—ã (–ø–æ–¥–ø–∏—Å–∫–∏)"]],
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
                await bot.send_message(
                    chat_id=update.message.chat.id,
                    text=(
                        "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å:\n"
                        "- üìú –ö–æ–º–∞–Ω–¥–∞ '–í—Å–µ –º–∏—Ç–∞–ø—ã': –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏—Ç–∞–ø–æ–≤.\n"
                        "- üîç –ö–æ–º–∞–Ω–¥–∞ '–ü–æ–∏—Å–∫': –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–π—Ç–∏ –º–∏—Ç–∞–ø –ø–æ –µ–≥–æ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é.\n"
                        "- üéØ –ö–æ–º–∞–Ω–¥–∞ '–ú–æ–∏ –º–∏—Ç–∞–ø—ã (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ)': –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∏—Ç–∞–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–æ–∑–¥–∞–ª–∏.\n"
                        "- üìå –ö–æ–º–∞–Ω–¥–∞ '–ú–æ–∏ –º–∏—Ç–∞–ø—ã (–ø–æ–¥–ø–∏—Å–∫–∏)': –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∏—Ç–∞–ø—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã.\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤—Ä—É—á–Ω—É—é."
                    )
                )

            # –ö–æ–º–∞–Ω–¥–∞ "–í—Å–µ –º–∏—Ç–∞–ø—ã" —Å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
            elif text == "–í—Å–µ –º–∏—Ç–∞–ø—ã" or text == "üìú –í—Å–µ –º–∏—Ç–∞–ø—ã" or text == "/meetups":
                keyboard = ReplyKeyboardMarkup(
                    [["üîç –ü–æ–∏—Å–∫", "üìú –í—Å–µ –º–∏—Ç–∞–ø—ã"], ["üéØ –ú–æ–∏ –º–∏—Ç–∞–ø—ã (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ)", "üìå –ú–æ–∏ –º–∏—Ç–∞–ø—ã (–ø–æ–¥–ø–∏—Å–∫–∏)"]],
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
                page = 1
                page_size = 15
                try:
                    response = requests.get(f"{BACKEND_URL}/meetings/?page={page}&page_size={page_size}")
                    response.raise_for_status()
                    data = response.json()
                    meetings = data.get("results", [])

                    if not meetings:
                        message = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏—Ç–∞–ø–æ–≤ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ."
                    else:
                        message = f"*–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}:*\n" + "\n".join(
                            [
                                f'‚Ä¢ {meeting.get("title")} (–î–∞—Ç–∞: {datetime.fromisoformat(meeting.get("datetime_beg")).strftime("%d.%m.%Y")}, –≤—Ä–µ–º—è: {datetime.fromisoformat(meeting.get("datetime_beg")).strftime("%H:%M")}) id:{meeting.get("id")}'
                                for meeting in meetings
                            ]
                        )

                    keyboard_buttons = []
                    if data.get("previous"):
                        keyboard_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"prev_page:{page - 1}:{page_size}"))
                    if data.get("next"):
                        keyboard_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"next_page:{page + 1}:{page_size}"))

                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
                    if keyboard_buttons:
                        keyboard = InlineKeyboardMarkup([keyboard_buttons])
                        await bot.send_message(chat_id=update.message.chat.id, text=message, parse_mode="Markdown", reply_markup=keyboard)
                    else:
                        await bot.send_message(chat_id=update.message.chat.id, text=message, parse_mode="Markdown")

                except Exception as e:
                    await bot.send_message(chat_id=update.message.chat.id, text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∏—Ç–∞–ø–æ–≤: {e}")

            elif text == "üîç –ü–æ–∏—Å–∫" or text == "–ü–æ–∏—Å–∫" or text.startswith("/search"):
                if text == "üîç –ü–æ–∏—Å–∫" or text == "–ü–æ–∏—Å–∫":
                    await bot.send_message(
                        chat_id=update.message.chat.id,
                        text="–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∏—Ç–∞–ø–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏."
                    )
                    user_states[user_id] = "waiting_for_search"
                else:
                    query = text.split(" ", 1)[1].strip()
                    try:
                        page = 1
                        page_size = 50
                        found = False
                        while not found:
                            response = requests.get(f"{BACKEND_URL}/meetings/?page={page}&page_size={page_size}")
                            response.raise_for_status()
                            data = response.json()
                            meetings = data.get("results", [])

                            meeting = next(
                                (m for m in meetings if
                                 str(m.get("id")) == query or m.get("title", "").lower() == query.lower()),
                                None
                            )

                            if meeting:
                                found = True
                                formatted_date = datetime.fromisoformat(meeting["datetime_beg"]).strftime("%d.%m.%Y")
                                formatted_time = datetime.fromisoformat(meeting["datetime_beg"]).strftime("%H:%M")
                                caption = (
                                    f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏—Ç–∞–ø–µ:\n"
                                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: *{meeting['title']}*\n"
                                    f"–û–ø–∏—Å–∞–Ω–∏–µ: _{meeting['description']}_\n"
                                    f"–î–∞—Ç–∞: {formatted_date}, –≤—Ä–µ–º—è: {formatted_time}\n"
                                    f"ID: {meeting['id']}"
                                )
                                website_link = f"https://qbit-meetup.web.app/meetup-details/{meeting['id']}"
                                keyboard = InlineKeyboardMarkup(
                                    [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=website_link)]]
                                )

                                if "image" in meeting and meeting["image"]:
                                    await bot.send_photo(
                                        chat_id=update.message.chat.id,
                                        photo=meeting["image"],
                                        caption=caption,
                                        reply_markup=keyboard,
                                        parse_mode="Markdown"
                                    )
                                else:
                                    await bot.send_message(
                                        chat_id=update.message.chat.id,
                                        text=caption,
                                        reply_markup=keyboard,
                                        parse_mode="Markdown"
                                    )
                                break

                            if not data.get("next"):
                                break
                            page += 1

                        if not found:
                            await bot.send_message(chat_id=update.message.chat.id, text="‚ùå –ú–∏—Ç–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    except Exception as e:
                        await bot.send_message(chat_id=update.message.chat.id, text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∏—Ç–∞–ø–∞: {e}")

            # –ö–æ–º–∞–Ω–¥–∞ "–ú–æ–∏ –º–∏—Ç–∞–ø—ã (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ)"
            elif text == "–ú–æ–∏ –º–∏—Ç–∞–ø—ã (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ)" or text == "üéØ –ú–æ–∏ –º–∏—Ç–∞–ø—ã (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ)" or text == "/my_meetups_owner":
                keyboard = ReplyKeyboardMarkup(
                    [["üîç –ü–æ–∏—Å–∫", "üìú –í—Å–µ –º–∏—Ç–∞–ø—ã"], ["üéØ –ú–æ–∏ –º–∏—Ç–∞–ø—ã (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ)", "üìå –ú–æ–∏ –º–∏—Ç–∞–ø—ã (–ø–æ–¥–ø–∏—Å–∫–∏)"]],
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
                logging.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –º–∏—Ç–∞–ø—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                try:
                    response = requests.get(f"{BACKEND_URL}/users/meetings_authored_active/?tg_id={user_id}", headers=headers)
                    response.raise_for_status()
                    meetings = response.json()

                    if not meetings:
                        await bot.send_message(chat_id=update.message.chat.id, text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–∏—Ç–∞–ø–æ–≤.")
                    else:
                        message = "*–í–∞—à–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –º–∏—Ç–∞–ø—ã:*\n" + "\n".join(
                            [
                                f'‚Ä¢ {meeting["title"]} (–î–∞—Ç–∞: {datetime.fromisoformat(meeting["datetime_beg"]).strftime("%d.%m.%Y")}, –≤—Ä–µ–º—è: {datetime.fromisoformat(meeting["datetime_beg"]).strftime("%H:%M")}) id:{meeting["id"]}'
                                for meeting in meetings
                            ]
                        )
                        await bot.send_message(chat_id=update.message.chat.id, text=message, parse_mode="Markdown")
                except Exception as e:
                    await bot.send_message(chat_id=update.message.chat.id, text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∏—Ç–∞–ø–æ–≤: {e}")

            # –ö–æ–º–∞–Ω–¥–∞ "–ú–æ–∏ –º–∏—Ç–∞–ø—ã (–ø–æ–¥–ø–∏—Å–∫–∏)"
            elif text == "–ú–æ–∏ –º–∏—Ç–∞–ø—ã (–ø–æ–¥–ø–∏—Å–∫–∏)" or text == "üìå –ú–æ–∏ –º–∏—Ç–∞–ø—ã (–ø–æ–¥–ø–∏—Å–∫–∏)" or text == "/my_meetups_subscriber":
                keyboard = ReplyKeyboardMarkup(
                    [["üîç –ü–æ–∏—Å–∫", "üìú –í—Å–µ –º–∏—Ç–∞–ø—ã"], ["üéØ –ú–æ–∏ –º–∏—Ç–∞–ø—ã (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ)", "üìå –ú–æ–∏ –º–∏—Ç–∞–ø—ã (–ø–æ–¥–ø–∏—Å–∫–∏)"]],
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
                logging.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –º–∏—Ç–∞–ø—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                try:
                    response = requests.get(f"{BACKEND_URL}/users/meetings_signed_active/?tg_id={user_id}", headers=headers)
                    response.raise_for_status()
                    meetings = response.json()

                    if not meetings:
                        await bot.send_message(chat_id=update.message.chat.id, text="‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–∏—Ç–∞–ø—ã.")
                    else:
                        message = "*–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –º–∏—Ç–∞–ø—ã:*\n" + "\n".join(
                            [
                                f'‚Ä¢ {meeting["title"]} (–î–∞—Ç–∞: {datetime.fromisoformat(meeting["datetime_beg"]).strftime("%d.%m.%Y")}, –≤—Ä–µ–º—è: {datetime.fromisoformat(meeting["datetime_beg"]).strftime("%H:%M")}) id:{meeting["id"]}'
                                for meeting in meetings
                            ]
                        )
                        await bot.send_message(chat_id=update.message.chat.id, text=message, parse_mode="Markdown")
                except Exception as e:
                    await bot.send_message(chat_id=update.message.chat.id, text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∏—Ç–∞–ø–æ–≤: {e}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ CallbackQuery –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
        elif update.callback_query:
            callback_data = update.callback_query.data
            if callback_data.startswith("prev_page") or callback_data.startswith("next_page"):
                try:
                    _, page_str, page_size_str = callback_data.split(":")
                    page = int(page_str)
                    page_size = int(page_size_str)

                    if page < 1:
                        await bot.answer_callback_query(update.callback_query.id, text="–≠—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.", show_alert=True)
                        return

                    response = requests.get(f"{BACKEND_URL}/meetings/?page={page}&page_size={page_size}")
                    response.raise_for_status()
                    data = response.json()
                    meetings = data.get("results", [])

                    if not meetings:
                        await bot.answer_callback_query(update.callback_query.id, text="–ë–æ–ª—å—à–µ –º–∏—Ç–∞–ø–æ–≤ –Ω–µ—Ç.", show_alert=True)
                        return

                    message = f"*–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}:*\n" + "\n".join(
                        [
                            f'‚Ä¢ *{meeting.get("title")}* (–î–∞—Ç–∞: {datetime.fromisoformat(meeting.get("datetime_beg")).strftime("%d.%m.%Y")}, –≤—Ä–µ–º—è: {datetime.fromisoformat(meeting.get("datetime_beg")).strftime("%H:%M")}) id:{meeting.get("id")}'
                            for meeting in meetings
                        ]
                    )

                    keyboard_buttons = []
                    if data.get("previous"):
                        keyboard_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"prev_page:{page - 1}:{page_size}"))
                    if data.get("next"):
                        keyboard_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"next_page:{page + 1}:{page_size}"))

                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
                    if keyboard_buttons:
                        keyboard = InlineKeyboardMarkup([keyboard_buttons])
                        await bot.edit_message_text(chat_id=update.callback_query.message.chat.id,
                                                    message_id=update.callback_query.message.message_id,
                                                    text=message,
                                                    parse_mode="Markdown",
                                                    reply_markup=keyboard)
                    else:
                        await bot.edit_message_text(chat_id=update.callback_query.message.chat.id,
                                                    message_id=update.callback_query.message.message_id,
                                                    text=message,
                                                    parse_mode="Markdown")

                except Exception as e:
                    await bot.send_message(chat_id=update.callback_query.message.chat.id, text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∏—Ç–∞–ø–æ–≤: {e}")

            if callback_data.startswith("subscribe") or callback_data.startswith("unsubscribe"):
                try:
                    user_id = update.callback_query.from_user.id
                    _, meeting_id = callback_data.split(":")

                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É/–æ—Ç–ø–∏—Å–∫—É
                    if callback_data.startswith("subscribe"):
                        response = requests.post(
                            f"{BACKEND_URL}/meetings/{meeting_id}/subscribe_by_id/?tg_id={user_id}", headers=headers)
                    elif callback_data.startswith("unsubscribe"):
                        response = requests.delete(
                            f"{BACKEND_URL}/meetings/{meeting_id}/unsubscribe_by_id/?tg_id={user_id}", headers=headers)

                    response.raise_for_status()

                    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞/–æ—Ç–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–∞
                    if response.status_code in [200, 201, 204]:
                        await bot.answer_callback_query(update.callback_query.id, text="–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.",
                                                        show_alert=True)

                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏—Ç–∞–ø–µ
                    meeting_response = requests.get(f"{BACKEND_URL}/meetings/{meeting_id}")
                    meeting_response.raise_for_status()
                    meeting = meeting_response.json()

                    formatted_date = datetime.fromisoformat(meeting["datetime_beg"]).strftime("%d.%m.%Y")
                    formatted_time = datetime.fromisoformat(meeting["datetime_beg"]).strftime("%H:%M")

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    caption = (
                        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏—Ç–∞–ø–µ:\n"
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: *{meeting['title']}*\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: _{meeting['description']}_\n"
                        f"–î–∞—Ç–∞: {formatted_date}, –≤—Ä–µ–º—è: {formatted_time}\n"
                        f"ID: {meeting['id']}"
                    )
                    website_link = f"https://qbit-meetup.web.app/meetup-details/{meeting['id']}"
                    keyboard_buttons = [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=website_link)]]

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
                    response = requests.get(f"{BACKEND_URL}/users/meetings_signed_active/?tg_id={user_id}",
                                            headers=headers)
                    response.raise_for_status()
                    response.encoding('utf-8')
                    signed_meetings = response.json()
                    is_signed = any(m["id"] == meeting["id"] for m in signed_meetings)

                    if is_signed:
                        keyboard_buttons[0].append(
                            InlineKeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è ‚ùå", callback_data=f"unsubscribe:{meeting['id']}"))
                    else:
                        keyboard_buttons[0].append(
                            InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è ‚úÖ", callback_data=f"subscribe:{meeting['id']}"))

                    new_reply_markup = InlineKeyboardMarkup(keyboard_buttons)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π
                    current_reply_markup = update.callback_query.message.reply_markup
                    if current_reply_markup and current_reply_markup.to_dict() == new_reply_markup.to_dict():
                        await bot.answer_callback_query(update.callback_query.id, text="–î–∞–Ω–Ω—ã–µ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
                                                        show_alert=True)
                        return

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await bot.edit_message_caption(
                        chat_id=update.callback_query.message.chat.id,
                        message_id=update.callback_query.message.message_id,
                        caption=caption,
                        reply_markup=new_reply_markup,
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    await bot.answer_callback_query(update.callback_query.id, text=f"–û—à–∏–±–∫–∞: {e}", show_alert=True)




    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        await bot.send_message(chat_id=update.message.chat.id, text=f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
